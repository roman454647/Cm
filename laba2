import numpy as np

def solve_with_rotation(m):

    n = len(m)

    # forward trace
    for i in range(n-1):
        for j in range(i + 1, n):
            c = m[i, i] / (m[i, i]**2 + m[j, i]**2) ** .5
            s = m[j, i] / (m[i, i]**2 + m[j, i]**2) ** .5
            tmp1 = m[i, :] * c + m[j, :] * s
            tmp2 = m[i, :] * -s + m[j, :] * c
            m[i, :] = tmp1
            m[j, :] = tmp2



    if is_singular(m):
        return('The system has infinite number of answers...')
    

    '''x = np.matrix([0.0 for i in range(n)]).T

    for k in range(n - 1, -1, -1):
        x[k, 0] = (m[k, -1] - m[k, k:n] * x[k:n, 0]) / m[k, k]'''
    x=[]
    for i in range(n - 1, -1, -1):
        y = m[i][n] / m[i][i]
        x.insert(0, y)

        for k in range(i - 1, -1, -1):
            m[k][n] -= m[k][i] * x[0]
    return(x)

def is_singular(m):
   return np.any(np.diag(m) == 0)


m= np.loadtxt('1matr.txt', usecols=range(5))
x= solve_with_rotation(m)
with open('1sol.txt', 'w') as f:
    # for item in x:
    f.write("%s\n" % x)
