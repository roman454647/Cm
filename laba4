import numpy as np
from numpy import linalg
import functools
def GaussElim(A):
    n=len(A)
    p =0
    for i in range(0, n-1): # search for maximum in this column
        firROw = i
        maxE1 = abs(A[i][i])
        maxRow = i
        for k in range(i + 1, n):
            if abs(A[k][i]) > maxE1:
                maxE1 = abs(A[k][i])
                maxRow = k
        # swap maximum row with current row (column by column)
        if(firROw!=maxRow):
            A[i],A[maxRow]=A[maxRow],A[i]
            p+=1

        for k in range(i+1, n):
            c = -A[k][i] / A[i][i]
            for j in range(i, n+1):
               A[k][j] += c * A[i][j]
     #checking for zero in matrix
    for i in range(n):
        if(A[i][i] ==0):
            return False

# solve equation Ax+b for an upper triangular matrix A

    x = []
    for i in range(n - 1, -1, -1):
        y = A[i][n] / A[i][i]
        x.insert(0,float(y))

        for k in range(i - 1, -1, -1):
            A[k][n] -= A[k][i] * x[0]
    return x

def euclid_norm(x):
    norm =0
    for i in range(len(x)):
        norm=norm+(x[i]**2)
    return norm**(1/2)

def divide(x,m):
    for i in range(len(x)):
        x[i] = x[i]/m
    return x

def matmult(m, v):
    nrows = len(m)
    w = [None] * nrows
    for row in range(nrows):
        w[row] = functools.reduce(lambda x,y: x+y, map(lambda x,y: x*y, m[row], v))
    return w

def add_matrix(X,Y):
    result = [[X[i][j] + Y[i][j] for j in range(len(X[0]))] for i in range(len(X))]
    return result

def multiply_matrix(X,Y):
    result = [[sum(a * b for a, b in zip(X_row, Y_col)) for Y_col in zip(*Y)] for X_row in X]
    return result

def create_matrix(m, n):
    return [[0]*n for _ in range(m)]

def mult_by_int(A,x):
    return [[elem*x for elem in row] for row in A]

def scalar_multiple(x,y):
    v =  [a*b  for a, b in zip(x, y)]
    return sum(v)

def matrix_substract(X,Y):
    result = [[abs(a - b) for a, b in zip(xrow, yrow)]
              for xrow, yrow in zip(X, Y)]
    return result
def add_column(A,x):
    for i in range(len(A)):
        A[i].insert(len(A[i]),x[i])
    return A

def RQI(A):
    n = len(A)
    E = np.zeros((n, n), int)
    np.fill_diagonal(E, 1)
    x = np.full((n), 1 / (n ** (1 / 2)))
    k =0
    while(k<100):
        k = k+1
        Ax = A.dot(x)
        #Ax =matmult(A,x)
        print("Ax = ",Ax)
        p= np.dot(Ax,x)/np.dot(x,x)
        #p = scalar_multiple(Ax,x)/scalar_multiple(x,x)
        #print("p = ",p)
        #pE=mult_by_int(E,p)
        #print("pE = ",pE)
        #te = matrix_substract(A,pE)
        #print("te = ",te)
        te = A-p*E
        #so = np.insert(te, n, x, axis=1)
        #so = add_column(te,x)
        #print("so== ",so)

        #print("so =  ",so)
        y = np.linalg.solve(te,x)
        #y= GaussElim(so)
        print("y = ",y)
        #print("y=  ",y)
        norm = euclid_norm(y)
        print("norm= ",norm)
        x =divide(y,norm)
        #x = divide(y,norm)
        if(norm>1000 or k ==99):
            print("x  =  ",-x)
            print("p = ",p)
            print("number of iteration = ",k)
            return



A= np.loadtxt('matr41.txt', usecols=range(4))
'''with open("matr1", encoding='utf-8') as fil:
    A= [[float(digit) for digit in line.split()] for line in fil]'''
RQI(A)
print("NUMpy =  ",np.linalg.eig(A))




   
  


